name: DevSecOps Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # ---------------------------
  # Job 1: SAST avec Semgrep
  # ---------------------------
  sast:
    name: Static Application Security Testing (SAST)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep
        run: |
          semgrep scan --config=p/ci --json --output=semgrep-report.json

      - name: Upload Semgrep report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep-report.json

  # ---------------------------
  # Job 2: SCA avec Snyk
  # ---------------------------
  sca:
    name: Software Composition Analysis (SCA)
    runs-on: ubuntu-latest
    needs: sast

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk auth $SNYK_TOKEN || true

      - name: Test Python dependencies
        run: snyk test --file=requirements.txt --json > snyk-report.json || true

      - name: Upload Snyk report
        uses: actions/upload-artifact@v4
        with:
          name: snyk-report
          path: snyk-report.json

  # ---------------------------
  # Job 3: DAST avec OWASP ZAP
  # ---------------------------
  dast:
    name: Dynamic Application Security Testing (DAST)
    runs-on: ubuntu-latest
    needs: sca

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 1. Build l'image Docker de ton app Flask
      - name: Build Docker image
        run: docker build -t my-flask-app .

      # 2. Run le container en arrière-plan sur le port 8080
      - name: Run Flask app
        run: docker run -d -p 8080:8080 my-flask-app

      # 3. Attendre que le service soit UP (max 30s)
      - name: Wait for Flask app
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:8080 > /dev/null; then
              echo "Flask app is up!"
              exit 0
            fi
            echo "Waiting for app..."
            sleep 1
          done
          echo "App did not start in time" && exit 1

      # 5️⃣ Run ZAP Baseline Scan
      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:8080'
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          cmd_options: >
            -r zap-report.html
            -J zap-report.json
            -w zap-warnings.md
          fail_action: false

      # 6️⃣ Upload ZAP reports
      - name: Upload ZAP Reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: |
            zap-report.html
            zap-report.json
            zap-warnings.md

     