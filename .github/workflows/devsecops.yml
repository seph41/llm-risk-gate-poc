name: DevSecOps Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # ---------------------------
  # Job 1: SAST avec Semgrep
  # ---------------------------
  sast:
    name: Static Application Security Testing (SAST)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep
        run: |
          semgrep --config=p/ci --fail-on-patterns --json --output=semgrep-report.json

      - name: Upload Semgrep report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep-report.json

  # ---------------------------
  # Job 2: SCA avec Snyk
  # ---------------------------
  sca:
    name: Software Composition Analysis (SCA)
    runs-on: ubuntu-latest
    needs: sast

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk auth $SNYK_TOKEN

      - name: Test Python dependencies
        run: snyk test --file=requirements.txt --json > snyk-report.json

      - name: Upload Snyk report
        uses: actions/upload-artifact@v4
        with:
          name: snyk-report
          path: snyk-report.json

  # ---------------------------
  # Job 3: DAST avec OWASP ZAP
  # ---------------------------
  dast:
    name: Dynamic Application Security Testing (DAST)
    runs-on: ubuntu-latest
    needs: sca

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build Docker app
        run: docker build -t myapp .

      - name: Run app in background
        run: docker run -d -p 8080:8080 myapp

      - name: Run OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:8080'
          format: 'json'
          output: 'zap-report.json'

      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report.json
